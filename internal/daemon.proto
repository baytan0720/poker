syntax = "proto3";

package service;
option go_package="./service";

enum Status {
  Ok = 0;
  NotOk = 1;
}

message PingReq {}

message PingRes {
  Status Status = 1;
}

message CreateContainerReq {
  string Image = 1;
  string Command = 2;
  string Name = 3;
}

message CreateContainerRes {
  Status Status = 1;
  string Msg = 2;
  string ContainerId = 3;
}

message RunContainerReq {
  string ContainerId = 1;
}

message RunContainerRes {
  Status Status = 1;
  string Msg = 2;
  string PtyPort = 3;
}

message StartNStopContainerInfo {
  Status Status = 1;
  string Msg = 2;
  string ContainerId = 3;
}

message StartContainersReq {
  repeated string ContainerIds = 1;
}

message StartContainersRes {
  repeated StartNStopContainerInfo StartNStopContainerInfo = 1;
}

message StopContainersReq {
  repeated string ContainerIds = 1;
}

message StopContainersRes {
  repeated StartNStopContainerInfo StartNStopContainerInfo = 1;
}

message ContainerInfo {
  string Id = 1;
  string Name = 2;
  string Image = 3;
  int64 Created = 4;
  string Command = 5;
  State State = 6;
}

message State {
  string Status = 1;
  int32 Pid = 2;
  string Error = 3;
  int64 Start = 4;
  int64 Finish = 5;
}

message PsContainersReq {

}

message PsContainersRes {
  Status Status = 1;
  string Msg = 2;
  repeated ContainerInfo containers = 3;
}

service daemon {
  rpc Ping(PingReq) returns(PingRes);
  rpc CreateContainer(CreateContainerReq) returns(CreateContainerRes);
  rpc RunContainer(RunContainerReq) returns(RunContainerRes);
  rpc StartContainer(StartContainersReq) returns(StartContainersRes);
  rpc StopContainer(StopContainersReq) returns(StopContainersRes);
  rpc PsContainer(PsContainersReq) returns(PsContainersRes);
}