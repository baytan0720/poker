// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: daemon.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error)
	CreateContainer(ctx context.Context, in *CreateContainerReq, opts ...grpc.CallOption) (*CreateContainerRes, error)
	RunContainer(ctx context.Context, in *RunContainerReq, opts ...grpc.CallOption) (*RunContainerRes, error)
	StartContainer(ctx context.Context, in *StartContainersReq, opts ...grpc.CallOption) (*StartContainersRes, error)
	StopContainer(ctx context.Context, in *StopContainersReq, opts ...grpc.CallOption) (*StopContainersRes, error)
	PsContainer(ctx context.Context, in *PsContainersReq, opts ...grpc.CallOption) (*PsContainersRes, error)
	LogsContainer(ctx context.Context, in *LogsContainerReq, opts ...grpc.CallOption) (*LogsContainerRes, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error) {
	out := new(PingRes)
	err := c.cc.Invoke(ctx, "/service.daemon/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) CreateContainer(ctx context.Context, in *CreateContainerReq, opts ...grpc.CallOption) (*CreateContainerRes, error) {
	out := new(CreateContainerRes)
	err := c.cc.Invoke(ctx, "/service.daemon/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) RunContainer(ctx context.Context, in *RunContainerReq, opts ...grpc.CallOption) (*RunContainerRes, error) {
	out := new(RunContainerRes)
	err := c.cc.Invoke(ctx, "/service.daemon/RunContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) StartContainer(ctx context.Context, in *StartContainersReq, opts ...grpc.CallOption) (*StartContainersRes, error) {
	out := new(StartContainersRes)
	err := c.cc.Invoke(ctx, "/service.daemon/StartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) StopContainer(ctx context.Context, in *StopContainersReq, opts ...grpc.CallOption) (*StopContainersRes, error) {
	out := new(StopContainersRes)
	err := c.cc.Invoke(ctx, "/service.daemon/StopContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) PsContainer(ctx context.Context, in *PsContainersReq, opts ...grpc.CallOption) (*PsContainersRes, error) {
	out := new(PsContainersRes)
	err := c.cc.Invoke(ctx, "/service.daemon/PsContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) LogsContainer(ctx context.Context, in *LogsContainerReq, opts ...grpc.CallOption) (*LogsContainerRes, error) {
	out := new(LogsContainerRes)
	err := c.cc.Invoke(ctx, "/service.daemon/LogsContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServer is the server API for Daemon service.
// All implementations must embed UnimplementedDaemonServer
// for forward compatibility
type DaemonServer interface {
	Ping(context.Context, *PingReq) (*PingRes, error)
	CreateContainer(context.Context, *CreateContainerReq) (*CreateContainerRes, error)
	RunContainer(context.Context, *RunContainerReq) (*RunContainerRes, error)
	StartContainer(context.Context, *StartContainersReq) (*StartContainersRes, error)
	StopContainer(context.Context, *StopContainersReq) (*StopContainersRes, error)
	PsContainer(context.Context, *PsContainersReq) (*PsContainersRes, error)
	LogsContainer(context.Context, *LogsContainerReq) (*LogsContainerRes, error)
	mustEmbedUnimplementedDaemonServer()
}

// UnimplementedDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonServer struct {
}

func (UnimplementedDaemonServer) Ping(context.Context, *PingReq) (*PingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDaemonServer) CreateContainer(context.Context, *CreateContainerReq) (*CreateContainerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedDaemonServer) RunContainer(context.Context, *RunContainerReq) (*RunContainerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunContainer not implemented")
}
func (UnimplementedDaemonServer) StartContainer(context.Context, *StartContainersReq) (*StartContainersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedDaemonServer) StopContainer(context.Context, *StopContainersReq) (*StopContainersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedDaemonServer) PsContainer(context.Context, *PsContainersReq) (*PsContainersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PsContainer not implemented")
}
func (UnimplementedDaemonServer) LogsContainer(context.Context, *LogsContainerReq) (*LogsContainerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogsContainer not implemented")
}
func (UnimplementedDaemonServer) mustEmbedUnimplementedDaemonServer() {}

// UnsafeDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServer will
// result in compilation errors.
type UnsafeDaemonServer interface {
	mustEmbedUnimplementedDaemonServer()
}

func RegisterDaemonServer(s grpc.ServiceRegistrar, srv DaemonServer) {
	s.RegisterService(&Daemon_ServiceDesc, srv)
}

func _Daemon_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.daemon/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.daemon/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).CreateContainer(ctx, req.(*CreateContainerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_RunContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunContainerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).RunContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.daemon/RunContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).RunContainer(ctx, req.(*RunContainerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.daemon/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).StartContainer(ctx, req.(*StartContainersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.daemon/StopContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).StopContainer(ctx, req.(*StopContainersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_PsContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsContainersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).PsContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.daemon/PsContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).PsContainer(ctx, req.(*PsContainersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_LogsContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsContainerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).LogsContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.daemon/LogsContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).LogsContainer(ctx, req.(*LogsContainerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Daemon_ServiceDesc is the grpc.ServiceDesc for Daemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Daemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Daemon_Ping_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _Daemon_CreateContainer_Handler,
		},
		{
			MethodName: "RunContainer",
			Handler:    _Daemon_RunContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _Daemon_StartContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _Daemon_StopContainer_Handler,
		},
		{
			MethodName: "PsContainer",
			Handler:    _Daemon_PsContainer_Handler,
		},
		{
			MethodName: "LogsContainer",
			Handler:    _Daemon_LogsContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}
